MongoDB以字典来存储数据
MongoDB不区分类型，但是区分大小写
每个文档都有一个特殊的键"_id", 这个键在文档所属的集合中是唯一的。

基本数据类型：
    null：空值或者不存在的字段
    布尔型：true， false
    数值：shell默认使用64位浮点型数值
    字符串：UTF-8字符串可表示为字符串类型的数据
    日期：被存储为自新纪元以来经过的毫秒数
 
数组：既能作为有序对象，也能作为无需对象操作，可包含不同数据类型的元素
集合：一组文档，类似于关系型数据库中的表

在mongo数据库中，一个文档就是一个字典，多个文档构成一个集合。一个集合里面的文档可以是各种各样的。

集合命名规范：
    不能是空字符串
    不能包含\0字符，这种字符表示集合名结束
    不能以system.开头，这是系统集合名保留的前缀
    不能包含保留字符 .和 $
    
多个文档组成集合，多个集合组成数据库
数据库命名规范：
    不能是空字符串、字母、数字以及下划线
    区分大小写，通常最好全部小写
    最多为64字节
    
    
    
启动shell时会连接到mongo服务器的test数据库
此处内存待更新

创建新的数据库
    use NewName
    
查询所有数据库的名字
    show dbs

删除数据库：
db.dropDatabase()

插入文档
db.SetName.insert({"XXX":"XXX"})
插入文档你也可以使用 db.col.save(document) 命令。
如果不指定 _id 字段 save() 方法类似于 insert() 方法。如果指定 _id 字段，则会更新该 _id 的数据。
3.2 版本后还有以下几种语法可用于插入文档:
 db.collection.insertOne():向指定集合中插入一条文档数据
 db.collection.insertMany():向指定集合中插入多条文档数据
#  插入单条数据
> var document = db.collection.insertOne({"a": 3})
> document
{
        "acknowledged" : true,
        "insertedId" : ObjectId("571a218011a82a1d94c02333")
}
#  插入多条数据
> var res = db.collection.insertMany([{"b": 3}, {'c': 4}])
> res
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("571a22a911a82a1d94c02337"),
                ObjectId("571a22a911a82a1d94c02338")
        ]
} 
 

创建集合
db.createCollection("")

查看集合中的所有文档
show collections

再MongoDB中，表格在插入数据时自动创建

删除集合：
db.SetName.drop()

删除文档
db.collection.remove(
   <query>,
   {
     justOne: <boolean>,
     writeConcern: <document>
   }
)
参数说明：
        query :（可选）删除的文档的条件。
        justOne : （可选）如果设为 true 或 1，则只删除一个文档。
        writeConcern :（可选）抛出异常的级别。
官方推荐使用 deleteOne() 和 deleteMany() 方法。
如删除集合下全部文档：
db.inventory.deleteMany({})
删除 status 等于 A 的全部文档：
db.inventory.deleteMany({ status : "A" })
删除 status 等于 D 的一个文档：
db.inventory.deleteOne( { status: "D" }

查询文档
调用集合的find方法查看所有文档
db.collection.find(query, projection)
        query ：可选，使用查询操作符指定查询条件
        projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。
如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：
>db.col.find().pretty()
        pretty() 方法以格式化的方式来显示所有文档。

查询集合中的一条文档
db.SetName.findOne()

更新已存在的文档
db.SetName.update(query，update[, upsert][, multi][, writeConcern])
    参数说明：
        query : update的查询条件，类似sql update查询内where后面的。
        update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的
        upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。
        multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。
        writeConcern :可选，抛出异常的级别。
save() 方法通过传入的文档来替换已有文档。
db.SetName.save(document)
在3.2版本开始，MongoDB提供以下更新集合文档的方法：
db.collection.updateOne() 向指定集合更新单个文档
db.collection.updateMany() 向指定集合更新多个文档

MongoDB 与 RDBMS Where 语句比较
如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：
操作	        格式	范例	RDBMS中的类似语句
等于	        {<key>:<value>}	         db.col.find({"by":"abc"}).pretty()	          where by = 'abc'
小于	        {<key>:{$lt:<value>}}	 db.col.find({"likes":{$lt:50}}).pretty()	   where likes < 50
小于或等于	  {<key>:{$lte:<value>}}   db.col.find({"likes":{$lte:50}}).pretty()	where likes <= 50
大于	        {<key>:{$gt:<value>}}	 db.col.find({"likes":{$gt:50}}).pretty()	   where likes > 50
大于或等于	  {<key>:{$gte:<value>}}   db.col.find({"likes":{$gte:50}}).pretty()	where likes >= 50
不等于        {<key>:{$ne:<value>}}	db.col.find({"likes":{$ne:50}}).pretty()	  where likes != 50


MongoDB AND 条件
MongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，及常规 SQL 的 AND 条件。
语法格式如下：
>db.col.find({key1:value1, key2:value2}).pretty()


MongoDB OR 条件
MongoDB OR 条件语句使用了关键字 $or,语法格式如下：
>db.col.find(
   {
      $or: [
         {key1: value1}, {key2:value2}
      ]
   }
).pretty()


AND 和 OR 联合使用
以下实例演示了 AND 和 OR 联合使用，类似常规 SQL 语句为： 'where likes>50 AND (by = '菜鸟教程' OR title = 'MongoDB 教程')'
>db.col.find({"likes": {$gt:50}, $or: [{"by": "菜鸟教程"},{"title": "MongoDB 教程"}]}).pretty()

MongoDB中条件操作符有：
(>) 大于 - $gt
(<) 小于 - $lt
(>=) 大于等于 - $gte
(<= ) 小于等于 - $lte

MongoDB (>) 大于操作符 - $gt
如果你想获取 "col" 集合中 "likes" 大于 100 的数据，你可以使用以下命令：
db.col.find({"likes" : {$gt : 100}})
类似于SQL语句：
Select * from col where likes > 100;

MongoDB（>=）大于等于操作符 - $gte
如果你想获取"col"集合中 "likes" 大于等于 100 的数据，你可以使用以下命令：
db.col.find({likes : {$gte : 100}})
类似于SQL语句：
Select * from col where likes >=100;

MongoDB (<) 小于操作符 - $lt
如果你想获取"col"集合中 "likes" 小于 150 的数据，你可以使用以下命令：
db.col.find({likes : {$lt : 150}})
类似于SQL语句：
Select * from col where likes < 150;

MongoDB (<=) 小于操作符 - $lte
如果你想获取"col"集合中 "likes" 小于等于 150 的数据，你可以使用以下命令：
db.col.find({likes : {$lte : 150}})
类似于SQL语句：
Select * from col where likes <= 150;

ongoDB 使用 (<) 和 (>) 查询 - $lt 和 $gt
如果你想获取"col"集合中 "likes" 大于100，小于 200 的数据，你可以使用以下命令：
db.col.find({likes : {$lt :200, $gt : 100}})
类似于SQL语句：
Select * from col where likes>100 AND  likes<200;

一些简写说明：
$gt -------- greater than  >

$gte --------- gt equal  >=

$lt -------- less than  <

$lte --------- lt equal  <=

$ne ----------- not equal  !=

$eq  --------  equal  =


MongoDB $type 操作符
$type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。
MongoDB 中可以使用的类型如下表所示：
类型	                数字	                备注
Double              	1	 
String	                2	 
Object	                3	 
Array	                4	 
Binary data             5	 
Undefined           	6	               已废弃。
Object id	            7	 
Boolean	                8	 
Date	                9	 
Null	                10	 
Regular Expression	    11	 
JavaScript          	13	 
Symbol	                14	 
JavaScript (with scope)	15	 
32-bit integer	        16	 
Timestamp	            17	 
64-bit integer	        18	 
Min key	                255	               Query with -1.
Max key             	127	 

果想获取 "col" 集合中 title 为 String 的数据，你可以使用以下命令：
db.col.find({"title" : {$type : 2}})


指定从MongoDB中读取的记录条数
limit()方法基本语法如下所示：
>db.COLLECTION_NAME.find().limit(NUMBER)

跳过指定数量的数据
skip() 方法脚本语法格式如下：
>db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)
skip和limit方法只适合小数据量分页，如果是百万级效率就会非常低，因为skip方法是一条条数据数过去的，建议使用where_limit


