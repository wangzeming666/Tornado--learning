简单示例：Poem Maker Pro

让我们以一个叫作Poem Maker Pro的简单例子开始。Poem Maker Pro这个Web应用有一个让用户填写的HTML表单，然后处理表单的结果。

poemmaker.py
import os.path

import tornado.httpserver
import tornado.ioloop
import tornado.options
import tornado.web

from tornado.options import define, options
define("port", default=8000, help="run on the given port", type=int)

class IndexHandler(tornado.web.RequestHandler):
    def get(self):
        self.render('index.html')

class PoemPageHandler(tornado.web.RequestHandler):
    def post(self):
        noun1 = self.get_argument('noun1')
        noun2 = self.get_argument('noun2')
        verb = self.get_argument('verb')
        noun3 = self.get_argument('noun3')
        self.render('poem.html', roads=noun1, wood=noun2, made=verb,
                difference=noun3)

if __name__ == '__main__':
    tornado.options.parse_command_line()
    app = tornado.web.Application(
        handlers=[(r'/', IndexHandler), (r'/poem', PoemPageHandler)],
        template_path=os.path.join(os.path.dirname(__file__), "templates")
    )
    http_server = tornado.httpserver.HTTPServer(app)
    http_server.listen(options.port)
    tornado.ioloop.IOLoop.instance().start()
除了poemmaker.py，你还需要将代码清单2-2和代码清单2-3中的两个文件加入到templates子文件夹中。

代码清单2-2 Poem Maker表单：index.html
<!DOCTYPE html>
<html>
    <head><title>Poem Maker Pro</title></head>
    <body>
        <h1>Enter terms below.</h1>
        <form method="post" action="/poem">
        <p>Plural noun<br><input type="text" name="noun1"></p>
        <p>Singular noun<br><input type="text" name="noun2"></p>
        <p>Verb (past tense)<br><input type="text" name="verb"></p>
        <p>Noun<br><input type="text" name="noun3"></p>
        <input type="submit">
        </form>
    </body>
</html>
代码清单2-3 Poem Maker模板：poem.html
<!DOCTYPE html>
<html>
    <head><title>Poem Maker Pro</title></head>
    <body>
        <h1>Your poem</h1>
        <p>Two {{roads}} diverged in a {{wood}}, and I—<br>
I took the one less travelled by,<br>
And that has {{made}} all the {{difference}}.</p>
    </body>
</html>
在命令行执行下述命令  

python poemmaker.py --port=8000
现在，在浏览器中打开http://localhost:8000。当浏览器请求根目录（/）时，Tornado程序将渲染index.html.

和之前不同的是，向Application对象的__init__方法传递了一个template_path参数。
        template_path=os.path.join(os.path.dirname(__file__), "templates")
template_path 参数告诉Tornado在哪里寻找模板文件。上面的代码告诉Python在你Tornado应用文件同目录下的template文件夹中寻找模板文件。
当给出了Tornado寻找模板的位置，就可以使用RequestHandler类的render方法来告诉Tornado读入模板文件，插入其中的模板代码，并返回结果给浏览器。如，
        self.render('index.html')

实际上index.html完全不能被称为模板，它所包含的完全是已编写好的HTML标记。通常的情况下我们希望HTML输出可以结合我们的程序传入给模板的值。
poem.html使用PoemPageHandler渲染，在其中有一些被双大括号括起来的字符串，其作用是占位，双大括号中的单词是占位符，
当我们渲染模板时希望以实际值代替。
我们可以使用向render函数中传递关键字参数的方法指定什么值将被填充到HTML文件中的对应位置，其中关键字对应模板文件中占位符的名字。


可以在Tornado应用之外使用Python解释器导入模板模块尝试模板系统，此时结果会被直接输出出来。
>>> from tornado.template import Template
>>> content = Template("<html><body><h1>{{ header }}</h1></body></html>")
>>> print content.generate(header="Welcome!")
<html><body><h1>Welcome!</h1></body></html>


可以将任何Python表达式放在双大括号中。Tornado将插入一个包含任何表达式计算结果值的字符串到输出中。下面是几个可能的例子：
>>> from tornado.template import Template
>>> print Template("{{ 1+1 }}").generate()
2
>>> print Template("{{ 'scrambled eggs'[-4:] }}").generate()
eggs
>>> print Template("{{ ', '.join([str(x*x) for x in range(10)]) }}").generate()
0, 1, 4, 9, 16, 25, 36, 49, 64, 81


控制流语句

你同样可以在Tornado模板中使用Python条件和循环语句。控制语句以{%和%}包围，并以类似下面的形式被使用：

{% if page is None %}
或

{% if len(entries) == 3 %}
控制语句的大部分就像对应的Python语句一样工作，支持if、for、while和try。在这些情况下，语句块以{%开始，并以%}结束。

所以这个模板：

<html>
    <head>
        <title>{{ title }}</title>
    </head>
    <body>
        <h1>{{ header }}</h1>
        <ul>
            {% for book in books %}
                <li>{{ book }}</li>
            {% end %}
        </ul>
    </body>
</html>
当被下面这个处理函数调用时：

class BookHandler(tornado.web.RequestHandler):
    def get(self):
        self.render(
            "book.html",
            title="Home Page",
            header="Books that are great",
            books=[
                "Learning Python",
                "Programming Collective Intelligence",
                "Restful Web Services"
            ]
        )
将会渲染得到下面的输出：

<html>
    <head>
        <title>Home Page</title>
    </head>
    <body>
        <h1>Books that are great</h1>
        <ul>
            <li>Learning Python</li>
            <li>Programming Collective Intelligence</li>
            <li>Restful Web Services</li>
        </ul>
    </body>
</html>
不像许多其他的Python模板系统，Tornado模板语言的一个最好的东西是在if和for语句块中可以使用的表达式没有限制。
因此，你可以在你的模板中执行所有的Python代码。

同样，你也可以在你的控制语句块中间使用{% set foo = 'bar' %}来设置变量。
你还有很多可以在控制语句块中做的事情，但是在大多数情况下，你最好使用UI模块来做更复杂的划分。我们稍后会更详细的看到这一点。


Tornado 在所有模板中提供了一些便利的函数，他们包括：
    escape(s)
            替换字符串s中的&, <, >, 为它们对应的HTML字符
    url_escape(s)
            使用urllib.quote_plus替换字符串s中的字符为URL编码形式
    json_encode(val)
            将val编码成JSON格式。（在系统底层，这是一个对json库的dumps函数的调用。更多信息查阅文档。
    squeeze(s)
            过滤字符串s，把连续的多个空白字符串替换成一个空格。
            
在Tornado 1.x中，模版不是被自动转义的。在Tornado 2.0中，模板被默认为自动转义（并且可以在Application构造函数中使用autoscaping=None关闭）。
在不同版本的迁移时要注意向后兼容。            


在模板中使用一个你自己编写的函数也是很简单的：只需要将函数名作为模板的参数传递即可，就像其他变量一样。
>>> from tornado.template import Template
>>> def disemvowel(s):
...     return ''.join([x for x in s if x not in 'aeiou'])
...
>>> disemvowel("george")
'grg'
>>> print Template("my name is {{d('mortimer')}}").generate(d=disemvowel)
my name is mrtmr
